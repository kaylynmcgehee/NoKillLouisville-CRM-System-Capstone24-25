@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using No_Kill_Inventory.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <MudText Typo="Typo.h4" GutterBottom="true">Register confirmation</MudText>

    <StatusMessage Message="@statusMessage"/>

    @if (emailConfirmationLink is not null)
    {
        <div class="my-4">
            <MudButton Href="@emailConfirmationLink"
                       Variant="Variant.Outlined"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       FullWidth="false">
                Confirm your account
            </MudButton>
        </div>
    }
    else
    {
        <MudText Typo="Typo.body1">Please check your email to confirm the account.</MudText>
    }
</div>

@code {
    /*
     * This page is a remnant of a template for part of AspNetCore's identity features
     *
     * It remains because accounts must be confirmed somehow
     *
     * The way it is done here, is that once an account's information is entered and validated,
     * the admin must click the link that pops up to confirm an account, otherwise it will be unusable
     */
    
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery] private string? Email { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }

}