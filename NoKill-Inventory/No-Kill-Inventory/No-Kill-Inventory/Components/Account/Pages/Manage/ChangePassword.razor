@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using No_Kill_Inventory.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

@*
    Allows a user to change the password of their current account
*@

<div class="d-flex flex-column gap-y-3">
    <MudText Typo="Typo.h4" GutterBottom="true">Change password</MudText>
    <StatusMessage Message="@message"/>

    <EditForm Model="Input"
              FormName="change-password"
              OnValidSubmit="OnValidSubmitAsync"
              method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>

        <!-- Old Password -->
        <div class="mud-input-control mud-input-input-control my-4">
            <div class="mud-input-control-input-container">
                <div class="mud-input mud-input-outlined mud-shrink">
                    <InputText @bind-Value="Input.OldPassword"
                               class="mud-input-slot mud-input-root mud-input-root-outlined"
                               type="password"
                               autocomplete="current-password"
                               aria-required="true"
                               placeholder="Old password"/>
                    <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                    <div class="mud-input-outlined-border"></div>
                </div>
                <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                       for="old-password">Old password</label>
            </div>
            <div class="mud-input-helper-text mud-input-error">
                <ValidationMessage For="() => Input.OldPassword" class="mud-input-error"/>
            </div>
        </div>

        <!-- New Password -->
        <div class="mud-input-control mud-input-input-control my-4">
            <div class="mud-input-control-input-container">
                <div class="mud-input mud-input-outlined mud-shrink">
                    <InputText @bind-Value="Input.NewPassword"
                               class="mud-input-slot mud-input-root mud-input-root-outlined"
                               type="password"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="New password"/>
                    <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                    <div class="mud-input-outlined-border"></div>
                </div>
                <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                       for="new-password">New password</label>
            </div>
            <div class="mud-input-helper-text mud-input-error">
                <ValidationMessage For="() => Input.NewPassword" class="mud-input-error"/>
            </div>
        </div>

        <!-- Confirm New Password -->
        <div class="mud-input-control mud-input-input-control my-4">
            <div class="mud-input-control-input-container">
                <div class="mud-input mud-input-outlined mud-shrink">
                    <InputText @bind-Value="Input.ConfirmPassword"
                               class="mud-input-slot mud-input-root mud-input-root-outlined"
                               type="password"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="Confirm password"/>
                    <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                    <div class="mud-input-outlined-border"></div>
                </div>
                <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                       for="confirm-password">Confirm password</label>
            </div>
            <div class="mud-input-helper-text mud-input-error">
                <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-error"/>
            </div>
        </div>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   ButtonType="ButtonType.Submit"
                   FullWidth="true">
            Update password
        </MudButton>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}