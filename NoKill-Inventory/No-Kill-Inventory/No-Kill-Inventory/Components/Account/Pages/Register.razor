@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using No_Kill_Inventory.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore

@attribute [Authorize]

<PageTitle>Register</PageTitle>

@*
    This is the page where an admin can register a new user
*@
<AuthorizeView>
    <Authorized Context="authState">
        <div class="d-flex flex-column gap-y-3">
            <MudText Typo="Typo.h4" GutterBottom="true">Add User</MudText>
            <StatusMessage Message="@Message"/>

            <EditForm Model="Input"
                      asp-route-returnUrl="@ReturnUrl"
                      method="post"
                      OnValidSubmit="RegisterUser"
                      FormName="register"
                      Enhance>
                <DataAnnotationsValidator />
                <hr />

                <ValidationSummary class="text-danger" role="alert"/>

                <!-- Email / Username -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.Email"
                                       class="mud-input-slot mud-input-root mud-input-root-outlined"
                                       type="text"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="Username" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="email">Username</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.Email" class="mud-input-error"/>
                    </div>
                </div>

                <!-- Password -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.Password"
                                       class="mud-input-slot mud-input-root mud-input-root-outlined"
                                       type="password"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="Password" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="password">Password</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.Password" class="mud-input-error"/>
                    </div>
                </div>

                <!-- Confirm Password -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.ConfirmPassword"
                                       class="mud-input-slot mud-input-root mud-input-root-outlined"
                                       type="password"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="Confirm Password" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="confirm-password">Confirm Password</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-error"/>
                    </div>
                </div>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit"
                           FullWidth="true">
                    Register
                </MudButton>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        // Set user's email
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        
        // Set email using email store
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        
        // Create user in database with hashed password
        var result = await UserManager.CreateAsync(user, Input.Password);

        // Registration error
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Registration succeeded
        
        // Log information
        Logger.LogInformation("User created a new account with password.");

        // Generate confirmation token
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        // Callback URL for confirmation
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // Redirect to confirmation page if needed
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        
        // Sign in user
        await SignInManager.SignInAsync(user, isPersistent: false);
        
        // Redirect to return URL
        RedirectManager.RedirectTo(ReturnUrl);
    }

    // Attempts to create a new user
    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    // This defines the input fields in the InputForm on the page
    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} characters long.", MinimumLength = 8)]
        [Display(Name = "Username")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}