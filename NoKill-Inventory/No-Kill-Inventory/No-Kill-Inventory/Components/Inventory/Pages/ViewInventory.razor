@page "/Inventory/ViewInventory"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Design
@using No_Kill_Inventory.Data
@inject ApplicationDbContext Context
@rendermode InteractiveServer

@*
    Locks the page behind authentication 
*@
@attribute [Authorize]

<PageTitle>Home</PageTitle>

@* 
  <AuthorizeView> locks everything in it behind authentication
  
  This section deisplay the user's username and each table of items to see the current inventory  
*@
<AuthorizeView>
    @if (!_twostep)
    {
        <MudText Typo="Typo.h4">Hello, @context.User.Identity.Name</MudText>
        <MudText Typo="Typo.body1">The current inventory is below.</MudText>

        <MudTable T="FoodPallet" Items="@Context.FoodPallets" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Item ID Number</MudTh>
                <MudTh>Animal</MudTh>
                <MudTh>Food Left (lb)</MudTh>
                <MudTh>Arrival Date</MudTh>
                <MudTh>Expiration Date</MudTh>
                <MudTh>Location Description</MudTh>
            </HeaderContent>
            <RowTemplate Context="pallet">
                @if (pallet.Status == Status.Alive)
                {
                    <MudTd DataLabel="ID">@pallet.ItemID</MudTd>
                    <MudTd DataLabel="Animal">@pallet.Animal</MudTd>
                    <MudTd DataLabel="Weight">@pallet.CurrentWeight</MudTd>
                    <MudTd DataLabel="Arrival">@pallet.ArrivalDate.ToString("MM/dd/yyyy")</MudTd>
                    <MudTd DataLabel="Expiration">@pallet.ExpirationDate.ToString("MM/dd/yyyy")</MudTd>
                    <MudTd DataLabel="Location">@pallet.LocationDesc</MudTd>
                    <MudButton Variant="Variant.Filled" OnClick="() => ConfirmRemove(pallet.ItemID)" Color="Color.Primary">
                        <MudText>Remove Pallet</MudText>
                    </MudButton>
                }
            </RowTemplate>
        </MudTable>
        if (_success)
        {
            <MudText Color="Color.Success">Success!</MudText>
        }
    }
    else
    {
        <MudPaper Class="pa-16 ma-2" Outlined="true">
            <MudStack AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4" Color="Color.Error">Remove Pallet?</MudText>
                <MudText Typo="Typo.body1" Color="Color.Primary">
                    This will move the pallet and its information to the Old Inventory tab. Please make sure you have selected
                    the correct entry.
                </MudText>
                <MudStack Row="true" Spacing="4">
                    <MudButton Variant="Variant.Filled" OnClick="@Remove" Color="Color.Primary">
                        <MudText>Confirm</MudText>
                    </MudButton>
                    <MudButton Variant="Variant.Filled" OnClick="@GoBack" Color="Color.Primary">
                        <MudText>Go Back</MudText>
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    }

</AuthorizeView>

@code {
    private bool _success = false;
    private bool _twostep = false;
    private int SelectedPallet;
    
    
    private void ConfirmRemove(int ID)
    {
        SelectedPallet = ID;
        _twostep = true;
        
    }

    private void GoBack()
    {
        _twostep = false;
    }
    
    async Task Remove()
    {
        var entry = Context.FoodPallets.FirstOrDefault(item => item.ItemID == SelectedPallet);

        if (entry != null)
        {
            entry.Status = Status.Used;
        }

        await Context.SaveChangesAsync();
        _twostep = false;
    }
}