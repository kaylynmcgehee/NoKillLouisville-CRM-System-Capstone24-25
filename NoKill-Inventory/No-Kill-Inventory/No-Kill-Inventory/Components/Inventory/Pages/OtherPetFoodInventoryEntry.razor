@page "/OtherPetFoodInventoryEntry"

@using System.ComponentModel.DataAnnotations
@using Humanizer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Other Pet Food Inventory Entry</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="d-flex flex-column gap-y-3">
            <MudText Typo="Typo.h4" GutterBottom="true">Other Pet Food Inventory Entry</MudText>

            <EditForm Model="Input"
                      FormName="Cat"
                      OnValidSubmit="HandleValidSubmit"
                      Context="editContext">
                <DataAnnotationsValidator/>

                @if (formSubmitted)
                {
                    <MudAlert Severity="Severity.Success" Elevation="0" Class="my-2">
                        Form successfully submitted!
                    </MudAlert>
                }
                @if (formError)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0" Class="my-2">
                        Animal or Description too long.
                    </MudAlert>
                }

                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>

                <!-- Animal -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.Animal"
                                       class="mud-input-slot mud-input-root mud-input-root-outlined"
                                       placeholder="Animal"/>
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="animal">Animal</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.Animal" class="mud-input-error"/>
                    </div>
                </div>

                <!-- Description -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.Desc"
                                       class="mud-input-slot mud-input-root mud-input-root-outlined"
                                       placeholder="Description"/>
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="desc">Description</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.Desc" class="mud-input-error"/>
                    </div>
                </div>

                <!-- Quantity (lbs) -->
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputNumber @bind-Value="Input.WeightOther"
                                         class="mud-input-slot mud-input-root mud-input-root-outlined"
                                         placeholder="Quantity (lbs)"/>
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol"
                               for="weightOther">Quantity (lbs)</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <ValidationMessage For="() => Input.WeightOther" class="mud-input-error"/>
                    </div>
                </div>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit"
                           FullWidth="true">
                    Submit
                </MudButton>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    
    private bool formSubmitted = false;

    private bool formError = false;
    
    public Task HandleValidSubmit()
    {
        if (Input.Animal.Length < 100 && Input.Desc.Length < 500)
        {
            OtherItemStore();
            formSubmitted = true;
            Input = new InputModel(); // Clear form fields
            StateHasChanged();
        }
        else
        {
            formError = true;
        }
        return Task.CompletedTask;
    }

    public void OtherItemStore()
    {
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            var newOtherItem = new OtherItem
            {
                Animal = Input.Animal,
                Desc = Input.Desc,
                Weight = Input.WeightOther,
                
            };
            context.Add(newOtherItem);
            context.SaveChanges();
        }
    }
    
    
    private sealed class InputModel
    {
        [Required]
        [MaxLength(100, ErrorMessage = "Animal Too Long")]
        [Display(Name = "Animal")]
        public String Animal { get; set; }
        
        [Required]
        [MaxLength(500, ErrorMessage = "Description Too Long")]
        [Display(Name = "Desc")]
        public String Desc { get; set; }
        
        [Required(ErrorMessage = "Input A Number")]
        [Display(Name = "WeightOther")]
        public int WeightOther { get; set; }
    }
}