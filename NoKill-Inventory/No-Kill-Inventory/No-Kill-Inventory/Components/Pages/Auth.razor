@page "/auth"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@inject ApplicationDbContext Context
@inject SignInManager<ApplicationUser> SignInManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

@*
    This page is the admin dashboard, where they can view all current users and delete them if needed
*@

<style>
    table {
        border-collapse: collapse;
        width: 100%; 
    }
    td, th {
      border: 1px solid #dddddd;
      text-align: left;
      padding: 8px;
    }
    
    tr:nth-child(even) {
      background-color: #dddddd;
    }
</style>

<PageTitle>Auth</PageTitle>

<h1>Manage Users</h1>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
    
    <div>
        <table>
            <tr>
                <th>Username</th>
                <th>Role</th>
                <th>Remove</th>
            </tr>
            @foreach (var u in Context.Users)
            {
                var userRole = Context.UserRoles
                    .Where(ur => ur.UserId == u.Id)
                    .Join(Context.Roles,
                        ur => ur.RoleId,
                        role => role.Id,
                        (ur, role) => role.Name)
                    .FirstOrDefault();
                <tr>
                    <td>@u.UserName</td>
                    <td>@userRole</td> 
                    <td>
                        @if(u.Id != SignInManager.UserManager.GetUserId(SignInManager.Context.User)){
                            <button type="button" @onclick="(async () => await DeleteUser(u.Id))">Delete</button>
                        }
                    </td>
                </tr>
            }
        </table>
    </div>

</AuthorizeView>

@code
{
    // Deletes the selected user from the table
    private async Task DeleteUser(string UserID)
    {
        // Finds the user based on their UserID
        var user = await Context.Users.FindAsync(UserID);
        
        // Deletes them from the table and saves
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            if (user != null)
            {
                context.Users.Remove(user);
                await context.SaveChangesAsync();
            }
        }
    }
}
