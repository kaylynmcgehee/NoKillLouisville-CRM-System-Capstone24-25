@page "/auth"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@inject ApplicationDbContext Context
@inject SignInManager<ApplicationUser> SignInManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Auth</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Manage Users</MudText>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h6" Class="mb-4">Hello @context.User.Identity?.Name!</MudText>
        
        <MudTable Items="Context.Users.ToList()">
            <HeaderContent>
                <MudTh>Username</MudTh>
                <MudTh>Role</MudTh>
                <MudTh>Remove</MudTh>
            </HeaderContent>
            <RowTemplate Context="user">
                @{
                    var userRole = Context.UserRoles
                        .Where(ur => ur.UserId == user.Id)
                        .Join(Context.Roles,
                              ur => ur.RoleId,
                              role => role.Id,
                              (ur, role) => role.Name)
                        .FirstOrDefault();
                }
                <MudTd DataLabel="Username">@user.UserName</MudTd>
                <MudTd DataLabel="Role">@userRole</MudTd>
                <MudTd DataLabel="Remove">
                    @if(user.Id != SignInManager.UserManager.GetUserId(SignInManager.Context.User))
                    {
                        <MudButton Color="Color.Error" OnClick="@(() => DeleteUser(user.Id))">
                            Delete
                        </MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.subtitle1">You are not authorized to view this page.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Deletes the selected user from the table
    private async Task DeleteUser(string UserID)
    {
        // Finds the user based on their UserID
        var user = await Context.Users.FindAsync(UserID);
        
        // Deletes the user and saves changes
        using (var context = new ApplicationDbContext(new DbContextOptions<ApplicationDbContext>()))
        {
            if (user != null)
            {
                context.Users.Remove(user);
                await context.SaveChangesAsync();
            }
        }
    }
}
