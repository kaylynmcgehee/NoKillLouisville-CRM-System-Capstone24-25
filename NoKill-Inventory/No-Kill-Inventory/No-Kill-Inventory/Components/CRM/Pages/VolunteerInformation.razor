@page "/volunteer-information"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@using OfficeOpenXml
@inject ApplicationDbContext Context
@inject IHostEnvironment HostEnvironment
@rendermode InteractiveServer

@attribute [Authorize]

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f6f9;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h1, h2 {
        text-align: center;
        color: #2c3e50;
    }

    .container {
        max-width: 800px;
        margin: 20px auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    th, td {
        border: 1px solid #ddd;
        text-align: left;
        padding: 12px;
    }

    th {
        background-color: #34495e;
        color: #fff;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #2980b9;
    }

    button:disabled {
        background-color: #bdc3c7;
        cursor: not-allowed;
    }

    .table-container {
        overflow-x: auto;
    }
</style>

<PageTitle>Manage Volunteers</PageTitle>

<AuthorizeView>
    <div class="container" style="margin-top: 20px !important; max-width: 1000px; margin: auto; font-family: Arial, sans-serif;">
    <h1 style="text-align: center; color: #333;">Volunteers</h1>

    @if (selectedVolunteer != null)
    {
        <div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">
            <button @onclick="ShowConfirmationModal"
                    style="padding: 8px 12px; background-color: #c16770; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Remove Volunteer
            </button>
        </div>
    }

    <div style="margin-top: 20px; overflow-x: auto;">
        <table style="width: 100%; border-collapse: collapse; text-align: center;">
            <thead style="background-color: #f2f2f2;">
                <tr>
                    <th>Volunteer ID</th>
                    <th>Name</th>
                    <th>Available</th>
                    <th>Check-In Time</th>
                    <th>Total Minutes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var volunteer in allVolunteers)
                {
                    <tr @onclick="() => SelectVolunteer(volunteer)" 
                        style="cursor: pointer; background-color: @(selectedVolunteer?.VolunteerID == volunteer.VolunteerID ? "#d1e7dd" : "")">
                        <td>@volunteer.VolunteerID</td>
                        <td>@volunteer.Name</td>
                        <td>@(volunteer.IsAvailable ? "Yes" : "No")</td>
                        <td>@(volunteer.CheckInTime?.ToString("g") ?? "-")</td>
                        <td>@volunteer.TotalMinutes.ToString("0.##")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


    @if (showConfirmation)
    {
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                    background: rgba(0, 0, 0, 0.5); display: flex; align-items: center;
                    justify-content: center; z-index: 999;">
            <div style="background: white; padding: 20px; border-radius: 10px; max-width: 400px; text-align: center;">
                <h3>Are you sure?</h3>
                <p>Do you really want to remove <strong>@selectedVolunteer?.Name</strong>?</p>
                <button style="margin-right: 10px;" @onclick="ConfirmDelete">Yes, Remove</button>
                <button @onclick="CancelDelete">Cancel</button>
            </div>
        </div>
    }
</AuthorizeView>

@code {
    private int volunteersCount;
    private List<Recipient> recipients = new List<Recipient>();
    private string volunteerName = string.Empty;
    private List<Volunteer> availableVolunteers = new List<Volunteer>();
    private string recipientItemsReceivingToShow;
    private List<Volunteer> allVolunteers = new List<Volunteer>();

    private Volunteer? selectedVolunteer = null;
    private bool showConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        availableVolunteers = await Context.Volunteers.Where(v => v.IsAvailable).ToListAsync();
        volunteersCount = availableVolunteers.Count;
        await LoadRecipientsFromDatabase();
        allVolunteers = await Context.Volunteers.ToListAsync();
    }

    private async Task LoadRecipientsFromDatabase()
    {
        recipients = await Context.Recipients.ToListAsync();
    }

    private async Task AddVolunteer()
    {
        var volunteer = new Volunteer
        {
            Name = "Volunteer " + (volunteersCount + 1),
            IsAvailable = true
        };

        Context.Volunteers.Add(volunteer);
        await Context.SaveChangesAsync();

        volunteersCount++;
        allVolunteers.Add(volunteer);
    }

    private void SelectVolunteer(Volunteer volunteer)
    {
        selectedVolunteer = volunteer;
    }

    private void ShowConfirmationModal()
    {
        showConfirmation = true;
    }

    private void CancelDelete()
    {
        showConfirmation = false;
        selectedVolunteer = null;
    }

    private async Task ConfirmDelete()
    {
        if (selectedVolunteer != null)
        {
            Context.Volunteers.Remove(selectedVolunteer);
            await Context.SaveChangesAsync();

            allVolunteers.Remove(selectedVolunteer);
            availableVolunteers.Remove(selectedVolunteer);
            selectedVolunteer = null;
            showConfirmation = false;
        }
    }
}
