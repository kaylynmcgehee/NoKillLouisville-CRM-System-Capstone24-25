@page "/Schedule"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using No_Kill_Inventory.Data
@using OfficeOpenXml
@inject ApplicationDbContext Context
@inject IHostEnvironment HostEnvironment
@rendermode InteractiveServer

@attribute [Authorize]

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f6f9;
        color: #333;
        margin: 0;
        padding: 0;
    }

    h1, h2 {
        text-align: center;
        color: #2c3e50;
    }

    .container {
        max-width: 800px;
        margin: 20px auto;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    th, td {
        border: 1px solid #ddd;
        text-align: left;
        padding: 12px;
    }

    th {
        background-color: #34495e;
        color: #fff;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #2980b9;
    }

    button:disabled {
        background-color: #bdc3c7;
        cursor: not-allowed;
    }

    .table-container {
        overflow-x: auto;
    }
</style>

<PageTitle>Schedule</PageTitle>

<AuthorizeView>
   <div class="container">
    <h1>Volunteer Information</h1>
    <div style="display: flex; justify-content: space-between;">
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Volunteers Count</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@volunteersCount</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div style="flex: 1; margin-left: 20px;">
            <h2>Volunteers Today:</h2>
            <div style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 8px;">
                <ul>
                    @foreach (var volunteer in availableVolunteers)
                    {
                        <li>@volunteer.Name</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div style="text-align: center; margin-top: 20px;">
        <input @bind="volunteerName" placeholder="Enter volunteer name" style="padding: 10px; width: 60%; border-radius: 5px; border: 1px solid #ddd;" />
        <div style="margin-top: 10px;">
            <button @onclick="CheckInVolunteer">Check-In</button>
            <button @onclick="CheckOutVolunteer">Check-Out</button>
        </div>
        <div style="text-align: center; margin-top: 10px;">
            <button @onclick="SignOutAllVolunteers">Sign Out All Volunteers</button>
        </div>
    </div>
</div>

    <div class="container">
    <h2>Recipients</h2>
    <div class="table-container">
        <div style="text-align: center; margin-top: 10px;">
            <button @onclick="ResetAllRecipients">Reset All Recipients</button>
        </div>
        <table>
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Status</th>
                    <th>Update Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recipient in recipients.Where(r => r.Status != "Completed"))
                {
                    <tr>
                        <td>@recipient.FirstName</td>
                        <td>@recipient.LastName</td>
                        <td>@recipient.Status</td>
                        <td>
                            <button @onclick="() => UpdateRecipientStatus(recipient)">Update Status</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="container">
    <h2>Completed Recipients</h2>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recipient in recipients.Where(r => r.Status == "Completed"))
                {
                    <tr>
                        <td>@recipient.FirstName</td>
                        <td>@recipient.LastName</td>
                        <td>@recipient.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
</AuthorizeView>

@code {
    private int volunteersCount;
    private List<Recipient> recipients = new List<Recipient>();

private string volunteerName = string.Empty;
private List<Volunteer> availableVolunteers = new List<Volunteer>();

protected override async Task OnInitializedAsync()
{
    // Load available volunteers
    availableVolunteers = await Context.Volunteers.Where(v => v.IsAvailable).ToListAsync();
    volunteersCount = availableVolunteers.Count;
    // Load recipients from the database
    await LoadRecipientsFromDatabase();
}

    private async Task LoadRecipientsFromDatabase()
    {
        recipients = await Context.Recipients.ToListAsync();
    }

    private async Task LoadRecipientsFromExcel()
    {
        var path = Path.Combine(HostEnvironment.ContentRootPath, "wwwroot", "Data", "Recipients.xlsx");
        if (File.Exists(path))
        {
            using (var package = new ExcelPackage(new FileInfo(path)))
            {
                var worksheet = package.Workbook.Worksheets[0];
                int rowCount = worksheet.Dimension.Rows;

                for (int row = 2; row <= rowCount; row++)
                {
                    var firstName = worksheet.Cells[row, 1].Text;
                    var lastName = worksheet.Cells[row, 2].Text;

                    var existingRecipient = await Context.Recipients
                        .FirstOrDefaultAsync(r => r.FirstName == firstName && r.LastName == lastName);

                    if (existingRecipient == null)
                    {
                        var newRecipient = new Recipient
                        {
                            FirstName = firstName,
                            LastName = lastName,
                            Status = "Not Started"
                        };

                        Context.Recipients.Add(newRecipient);
                    }
                    else
                    {
                        existingRecipient.Status = existingRecipient.Status ?? "Not Started";
                        Context.Recipients.Update(existingRecipient);
                    }
                }
                await Context.SaveChangesAsync();
            }
        }
    }

    private async Task AddVolunteer()
    {
        var volunteer = new Volunteer
        {
            Name = "Volunteer " + (volunteersCount + 1),
            IsAvailable = true
        };

        Context.Volunteers.Add(volunteer);
        await Context.SaveChangesAsync();

        volunteersCount++;
    }

    private async Task RemoveVolunteer()
    {
        var volunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.IsAvailable);

        if (volunteer != null)
        {
            volunteer.IsAvailable = false;
            await Context.SaveChangesAsync();

            volunteersCount--;
        }
    }

    private async Task UpdateRecipientStatus(Recipient recipient)
{
    if (recipient.Status == "Not Started")
    {
        recipient.Status = "In Progress";
    }
    else if (recipient.Status == "In Progress")
    {
        recipient.Status = "Completed";
    }
    else
    {
        recipient.Status = "Not Started";
    }

    Context.Recipients.Update(recipient);
    await Context.SaveChangesAsync();

    // Re-fetch the recipients to update the UI
    recipients = await Context.Recipients.ToListAsync();
}

private async Task CheckInVolunteer()
{
    if (!string.IsNullOrWhiteSpace(volunteerName))
    {
        var existingVolunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.Name == volunteerName);

        if (existingVolunteer == null)
        {
            var newVolunteer = new Volunteer
            {
                Name = volunteerName,
                IsAvailable = true
            };

            Context.Volunteers.Add(newVolunteer);
            availableVolunteers.Add(newVolunteer);
        }
        else if (!existingVolunteer.IsAvailable)
        {
            existingVolunteer.IsAvailable = true;
            availableVolunteers.Add(existingVolunteer);
        }

        await Context.SaveChangesAsync();

        // Update the count
        volunteersCount = availableVolunteers.Count;

        volunteerName = string.Empty;
    }
}
private async Task CheckOutVolunteer()
{
    if (!string.IsNullOrWhiteSpace(volunteerName))
    {
        var existingVolunteer = await Context.Volunteers
            .FirstOrDefaultAsync(v => v.Name == volunteerName && v.IsAvailable);

        if (existingVolunteer != null)
        {
            existingVolunteer.IsAvailable = false;
            availableVolunteers.Remove(existingVolunteer);

            await Context.SaveChangesAsync();

            // Update the count
            volunteersCount = availableVolunteers.Count;
        }

        volunteerName = string.Empty;
    }
}
private async Task SignOutAllVolunteers()
{
    // Get all currently available volunteers
    var availableVolunteersList = await Context.Volunteers
        .Where(v => v.IsAvailable)
        .ToListAsync();

    // Mark them as unavailable
    foreach (var volunteer in availableVolunteersList)
    {
        volunteer.IsAvailable = false;
        Context.Volunteers.Update(volunteer);
    }

    // Save changes to the database
    await Context.SaveChangesAsync();

    // Clear the available volunteers list and update the count
    availableVolunteers.Clear();
    volunteersCount = availableVolunteers.Count;
}
private async Task ResetAllRecipients()
{
    // Reset all recipient statuses to "Not Started"
    foreach (var recipient in recipients)
    {
        recipient.Status = "Not Started";
        Context.Recipients.Update(recipient);
    }

    // Save changes to the database
    await Context.SaveChangesAsync();

    // Refresh the recipient list to update the UI
    recipients = await Context.Recipients.ToListAsync();
}

}