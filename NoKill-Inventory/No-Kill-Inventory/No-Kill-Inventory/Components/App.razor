@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link rel="stylesheet" href="No-Kill-Inventory.styles.css"/>
    <link rel="icon" type="image/png" href="favicon.png"/>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <HeadOutlet/>
</head>

<body>
@if (ShouldUseInteractiveMode())
    {
        <Routes @rendermode="RenderMode.InteractiveServer" />
    }
    else
    {
        <Routes />
    }
<script src="_framework/blazor.web.js"></script>
<script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>

@code {
    private bool isUserLoggedIn;
    private string currentUrl;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserLoggedIn = authState.User.Identity.IsAuthenticated;
        currentUrl = NavigationManager.Uri; // Get the current URL
    }

    private bool ShouldUseInteractiveMode()
    {
        // Check if the user is logged in and not navigating to ChangePassword
        return isUserLoggedIn && !currentUrl.Contains("Account", StringComparison.OrdinalIgnoreCase);
    }
}
</html>