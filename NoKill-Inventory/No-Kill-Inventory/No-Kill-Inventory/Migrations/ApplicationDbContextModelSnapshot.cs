// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using No_Kill_Inventory.Data;

#nullable disable

namespace NoKillInventory.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa763901-a704-409f-8467-b07490858413",
                            Email = "adminuser",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMINUSER",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDbO2Mga/lwUwCGrBEh7URMiNpXOGxVq8s1a9ZQYtQwrwFbxvgfjRf3PPrygE6V5Eg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ff93826-545e-4d30-a23a-2d371346473b",
                            TwoFactorEnabled = false,
                            UserName = "adminuser"
                        });
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.FoodPallet", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Animal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentWeight")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InitWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemID");

                    b.ToTable("FoodPallets");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FormType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.PetFoodRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdultsInHousehold")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgreementToGuidelines")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorizedPickupPersons")
                        .HasColumnType("TEXT");

                    b.Property<string>("BreedingAnimals")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1Residence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat1SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2Residence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat2SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3Residence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat3SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4Residence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat4SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5Residence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cat5SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("CatCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildrenInHousehold")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1Breed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog1Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2Breed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog2Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3Breed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3DietaryDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3PrescriptionNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3SpayNeuter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dog3Weight")
                        .HasColumnType("TEXT");

                    b.Property<string>("DogCount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DogsKeptLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FosteringOrganization")
                        .HasColumnType("TEXT");

                    b.Property<string>("HouseholdIncomeSources")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NamesOfAdults")
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherAnimals")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredNotificationMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpayNeuterAcknowledgment")
                        .HasColumnType("TEXT");

                    b.Property<string>("TermsAndConditionsPart1")
                        .HasColumnType("TEXT");

                    b.Property<string>("TermsAndConditionsPart2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PetFoodRequests");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemsReceiving")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastAppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Recipients");
                });

            modelBuilder.Entity("Volunteer", b =>
                {
                    b.Property<int>("VolunteerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalMinutes")
                        .HasColumnType("REAL");

                    b.HasKey("VolunteerID");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("No_Kill_Inventory.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("No_Kill_Inventory.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("No_Kill_Inventory.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("No_Kill_Inventory.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Form", b =>
                {
                    b.HasOne("No_Kill_Inventory.Data.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Pet", b =>
                {
                    b.HasOne("No_Kill_Inventory.Data.Recipient", "Recipient")
                        .WithMany("Pets")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("No_Kill_Inventory.Data.Recipient", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
